MongoDB queries (Tema 2) Exercises

Objectius
Aprendre a consultar una base de dades NoSQL.
Durada: 4 dies

Por hacer: Recibir una calificación
Descripció
Tenim una col·lecció d'Objectes Restaurant a la ciutat de Nova York, i necessitem algunes consultes... pots ajudar-nos?

Escriu una consulta per mostrar tots els documents en la col·lecció Restaurants.
Escriu una consulta per mostrar el restaurant_id, name, borough i cuisine de tots els documents en la col·lecció Restaurants.
Escriu una consulta per mostrar el restaurant_id, name, borough i cuisine, però excloent el camp _id per tots els documents en la col·lecció Restaurants.
Escriu una consulta per mostrar restaurant_id, name, borough i zip code, però excloent el camp _id per tots els documents en la col·lecció Restaurants.
Escriu una consulta per mostrar tots els restaurants que estan en el Bronx.
Escriu una consulta per mostrar els primers 5 restaurants que estan en el Bronx.
Escriu una consulta per mostrar els 5 restaurants després de saltar els primers 5 que siguin del Bronx.
Escriu una consulta per trobar els restaurants que tenen algun score més gran de 90.
Escriu una consulta per trobar els restaurants que tenen un score més gran que 80 però menys que 100.
Escriu una consulta per trobar els restaurants que estan situats en una longitud inferior a -95.754168.
Escriu una consulta de MongoDB per a trobar els restaurants que no cuinen menjar 'American ' i tenen algun score superior a 70 i latitud inferior a -65.754168.
Escriu una consulta per trobar els restaurants que no preparen menjar 'American' i tenen algun score superior a 70 i que, a més, es localitzen en longituds inferiors a -65.754168. Nota: Fes aquesta consulta sense utilitzar operador $and.
Escriu una consulta per trobar els restaurants que no preparen menjar 'American ', tenen alguna nota 'A' i no pertanyen a Brooklyn. S'ha de mostrar el document segons la cuisine en ordre descendent.
Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que contenen 'Wil' en les tres primeres lletres en el seu nom.
Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que contenen 'ces' en les últimes tres lletres en el seu nom.
Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que contenen 'Reg' en qualsevol lloc del seu nom.
Escriu una consulta per trobar els restaurants que pertanyen al Bronx i preparen plats Americans o xinesos.
Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per aquells restaurants que pertanyen a Staten Island, Queens, Bronx o Brooklyn.
Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que NO pertanyen a Staten Island, Queens, Bronx o Brooklyn.
Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que aconsegueixin una nota menor que 10.
Escriu una consulta per trobar el restaurant_id, name, borough i cuisine per a aquells restaurants que preparen marisc ('seafood') excepte si són 'American ', 'Chinese' o el name del restaurant comença amb lletres 'Wil'.
Escriu una consulta per trobar el restaurant_id, name i grades per a aquells restaurants que aconsegueixin un grade de "A" i un score d'11 amb un ISODate "2014-08-11T00:00:00Z".
Escriu una consulta per trobar el restaurant_id, name i grades per a aquells restaurants on el 2n element de l'array de graus conté un grade de "A" i un score 9 amb un ISODate "2014-08-11T00:00:00Z".
Escriu una consulta per trobar el restaurant_id, name, adreça i ubicació geogràfica per a aquells restaurants on el segon element de l'array coord conté un valor entre 42 i 52.
Escriu una consulta per organitzar els restaurants per nom en ordre ascendent.
Escriu una consulta per organitzar els restaurants per nom en ordre descendent.
Escriu una consulta per organitzar els restaurants pel nom de la cuisine en ordre ascendent i pel barri en ordre descendent.
Escriu una consulta per saber si les direccions contenen el carrer.
Escriu una consulta que seleccioni tots els documents en la col·lecció de restaurants on els valors del camp coord és de tipus Double.
Escriu una consulta que seleccioni el restaurant_id, name i grade per a aquells restaurants que retornen 0 com a residu després de dividir algun dels seus score per 7.
Escriu una consulta per trobar el name de restaurant, borough, longitud, latitud i cuisine per a aquells restaurants que contenen 'mon' en algun lloc del seu name.
Escriu una consulta per trobar el name de restaurant, borough, longitud, latitud i cuisine per a aquells restaurants que contenen 'Mad' com a primeres tres lletres del seu name.

Nivell 1
Certificaràs el teu nivell 1 si construeixes 17 consultes correctes.

Nivell 2
Tindràs nivell 2 si construeixes entre 17 i 25 consultes correctes.

Nivell 3
Nivell 3 si aconsegueixes construir correctament més de 25 consultes correctes!!!

Recursos
Pots descarregar la base de dades en el fitxer adjunt.


¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬  ENGLISH  ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬

MongoDB queries (Topic 2) Exercises

Targets
Learn how to query a NoSQL database.
Duration: 4 days

Por hacer: Receive a rating

Description
We have a collection of Restaurant Objects in New York City, and we need some queries... can you help us?

1. Write a query to display all documents in the Restaurants collection.

db.Ristorante.find({})

2. Write a query to display the restaurant_id, name, borough, and cuisine of all documents in the Restaurants collection.

db.Ristorante.find({}, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1 })

3. Write a query to display the restaurant_id, name, borough, and cuisine, but excluding the _id field for all documents in the Restaurants collection.

db.Restaurants.find({}, { restaurant_id: 1, name: 1, borough: 1, cuisine: 1, _id: 0 })

4. Write a query to display restaurant_id, name, borough, and zip code, but excluding the _id field for all documents in the Restaurants collection.

db.Ristorante.find({}, { restaurant_id: 1, name: 1, borough: 1, "address.zipcode": 1, _id: 0 })

5. Write a query to show all the restaurants that are in the Bronx.

db.Ristorante.find({ "borough": "Bronx" })

6. Write a query to show the first 5 restaurants that are in the Bronx.

db.Ristorante.find({ "borough": "Bronx" }).limit(5)

7. Enter a query to display all 5 restaurants after skipping the first 5 that are in the Bronx.

db.Ristorante.find({ "borough": "Bronx" }).skip(5).limit(5)

8. Write a query to find the restaurants that have a score greater than 90.

db.Ristorante.find({ "grades.score": { $gt: 90 } })

9. Write a query to find restaurants that have a score greater than 80 but less than 100.

db.Ristorante.find({ "grades.score": { $gt: 80, $lt: 100 } })

10. Enter a query to find restaurants that are located at a longitude less than -95.754168.

db.Ristorante.find({ "address.coord.0": { $lt: -95.754168 } })

11. Write a MongoDB query to find restaurants that do not cook 'American' food and have a score greater than 70 and latitude less than -65.754168.

db.Ristorante.find({"cuisine": { $ne: "American" }, "grades.score": { $gt: 70 }, "address.coord.1": { $lt: -65.754168 }})

12. Write a query to find restaurants that do not prepare 'American' food and have a score higher than 70 and which, in addition, are located in longitudes lower than -65.754168. Note: Do this query without using the $and operator.

db.Ristorante.find({"cuisine": { $ne: "American" }, "grades.score": { $gt: 70 }, "address.coord.0": { $lt: -65.754168 }})

13. Enter a query to find restaurants that do not serve 'American' food, have an 'A' rating and are not in Brooklyn. The document should be displayed according to cuisine in descending order.

db.Ristorante.find({"cuisine": { $ne: "American" }, "grades.grade": "A", "borough": { $ne: "Brooklyn" }}).sort({ "cuisine": -1 })

14. Write a query to find the restaurant_id, name, borough and cuisine for those restaurants that contain 'Wil' in the first three letters of their name.

db.Ristorante.find({ "name": { $regex: /^Wil/i } }, { "restaurant_id": 1, "name": 1, "borough": 1, "cuisine": 1, "_id": 0 })

15. Write a query to find the restaurant_id, name, borough, and cuisine for those restaurants that contain 'ces' in the last three letters of their name.

db.Ristorante.find({ "name": { $regex: /ces$/i } }, { "restaurant_id": 1, "name": 1, "borough": 1, "cuisine": 1, "_id": 0 })

16. Write a query to find the restaurant_id, name, borough and cuisine for those restaurants that contain 'Reg' anywhere in their name.

db.Ristorante.find({ "name": { $regex: /Reg/i } }, { "restaurant_id": 1, "name": 1, "borough": 1, "cuisine": 1, "_id": 0 })

17. Write a query to find restaurants that belong to the Bronx and prepare American or Chinese dishes.

db.Ristorante.find({"borough": "Bronx", "cuisine": { $in: ["American", "Chinese"] }})

18. Write a query to find the restaurant_id, name, borough, and cuisine for those restaurants that belong to Staten Island, Queens, Bronx, or Brooklyn.

db.Ristorante.find({"borough": { $in: ["Staten Island", "Queens", "Bronx", "Brooklyn"] }}, {"restaurant_id": 1, "name": 1, "borough": 1, "cuisine": 1, "_id": 0})

19. Write a query to find the restaurant_id, name, borough, and cuisine for those restaurants that are NOT located in Staten Island, Queens, Bronx, or Brooklyn.

db.Ristorante.find({"borough": { $nin: ["Staten Island", "Queens", "Bronx", "Brooklyn"] }}, {"restaurant_id": 1, "name": 1, "borough": 1, "cuisine": 1, "_id": 0})

20. Write a query to find the restaurant_id, name, borough, and cuisine for those restaurants that score less than 10.

db.Ristorante.find({"grades.score": { $lt: 10 }}, {"restaurant_id": 1, "name": 1, "borough": 1, "cuisine": 1, "_id": 0})

21. Write a query to find the restaurant_id, name, borough and cuisine for those restaurants that prepare seafood ('seafood') unless they are 'American', 'Chinese' or the restaurant name starts with the letters 'Wil'.

db.Ristorante.find({$and: [{ "cuisine": "Seafood" }, { "cuisine": { $nin: ["American", "Chinese"] } }, { "name": { $not: /^Wil/i } }]}, {"restaurant_id": 1, "name": 1, "borough": 1, "cuisine": 1, "_id": 0})

22. Write a query to find the restaurant_id, name, and grades for those restaurants that achieve a grade of "A" and a score of 11 with an ISODate of "2014-08-11T00:00:00Z".

db.Ristorante.find({"grades": {$elemMatch: {"grade": "A", "score": 11, "date": ISODate("2014-08-11T00:00:00Z")}}}, {"restaurant_id": 1, "name": 1, "grades": 1, "_id": 0})

23. Write a query to find the restaurant_id, name, and grades for those restaurants where the 2nd element of the grades array contains a grade of "A" and a score of 9 with an ISODate of "2014-08-11T00:00:00Z".

db.Ristorante.find({"grades.1.grade": "A", "grades.1.score": 9, "grades.1.date": ISODate("2014-08-11T00:00:00Z")}, {"restaurant_id": 1, "name": 1, "grades": 1, "_id": 0})

24. Write a query to find the restaurant_id, name, address, and geographic location for those restaurants where the second element of the coord array contains a value between 42 and 52.

db.Ristorante.find({"address.coord.1": { $gt: 42, $lt: 52 }}, {"restaurant_id": 1, "name": 1, "address": 1, "_id": 0})

25. Enter a query to sort restaurants by name in ascending order.

db.Ristorante.find().sort({ "name": 1 })

26. Enter a query to sort restaurants by name in descending order.

db.Ristorante.find().sort({ "name": -1 })

27. Write a query to organise restaurants by cuisine name in ascending order and by neighborhood in descending order.

db.Ristorante.find().sort({"cuisine": 1, "borough": -1})

28. Write a query to determine if the addresses contain the street.

db.Ristorante.find({ "address.street": { $exists: true } })

29. Write a query that selects all documents in the restaurant collection where the values of the coord field are of type Double.

db.Ristorante.find({"address.coord": { $type: "double" }})

#### 30. Write a query that selects the restaurant_id, name, and grade for those restaurants that return 0 as the remainder after dividing any of their scores by 7.

db.Ristorante.find({"grades.score": { $mod: [7, 0] }}, {"restaurant_id": 1, "name": 1, "grades.grade": 1, "_id": 0})

31. Write a query to find the restaurant name, borough, longitude, latitude and cuisine for those restaurants that contain 'mon' somewhere in their name.

db.Ristorante.find({ "name": { $regex: /mon/i } }, { "name": 1, "borough": 1, "address.coord": 1, "cuisine": 1, "_id": 0 })

32. Write a query to find the restaurant name, borough, longitude, latitude and cuisine for those restaurants that contain 'Mad' as the first three letters of their name.

db.Ristorante.find({ "name": { $regex: /^Mad/i } }, { "name": 1, "borough": 1, "address.coord": 1, "cuisine": 1, "_id": 0 })
Level 1
You will certify your level 1 if you build 17 correct queries.

Level 2
You will get level 2 if you build between 17 and 25 correct queries.

Level 3
Level 3 if you successfully build more than 25 correct queries!!!

Resource
You can download the database in the attached file: restaurants.zip

Targets

Learn how to query a NoSQL database.
Duration: 4 daysDelivery:

Send the URL to a repository called mongoDB-queries that contains the solution:

It must be delivered in a single .js file with the obfuscated code (each statement on one line).
If you wish, you can also deliver another file that does not have the obfuscated code, and that includes your annotations in the queries.


¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬ Playing with other MongoDB operators ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬

Geospatial Operators Tests


Some Geospatial Operators:

$geoWithin: Selects documents within a specific shape or area.

$near: Returns geospatially near documents.

$geoIntersects: Selects documents that intersect a specified shape or area.
$nearSphere: Returns geospatially near documents on a sphere.



* It did not work well.

var bronxPolygon = [[[-73.9339, 40.7851], [-73.8966, 40.7851], [-73.8966, 40.8584], [-73.9339, 40.8584], [-73.9339, 40.7851]]];

var bronxPolygon = [
	[
		[-73.9339, 40.7851],
		[-73.8966, 40.7851],
		[-73.8966, 40.8584],
		[-73.9339, 40.8584],
		[-73.9339, 40.7851]
	]
]

db.Ristorante.find({"address.coord": {$geoWithin: {$geometry: {type: "Polygon", coordinates: [[[-73.9339, 40.7851], [-73.8966, 40.7851], [-73.8966, 40.8584], [-73.9339, 40.8584], [-73.9339, 40.7851]]]}}})


¬¬¬¬

* This one worked well. # Let's try another small polygon in the following query. For example, LitteItaly.

db.Ristorante.find({ "address.coord": { $geoWithin: { $geometry: { type: "Polygon", coordinates: [ [ [-73.9339, 40.7851], [-73.8966, 40.7851], [-73.8966, 40.8584], [-73.9339, 40.8584], [-73.9339, 40.7851] ] ] } } } })

This did not work due to syntax issues.

db.Ristorante.find({"address.coord": {$geoWithin: {$geometry: {type: "Polygon", coordinates: [[[-73.9339, 40.7851], [-73.8966, 40.7851], [-73.8966, 40.8584], [-73.9339, 40.8584], [-73.9339, 40.7851]]]}}}})

¬¬¬¬

# Let's try another small polygon in the following query. For example, Litte Italy.

var littleItalyPolygon = 
[
    [-73.9981, 40.7197],
    [-73.9922, 40.7239],
    [-73.9897, 40.7274],
    [-73.9851, 40.7289],
    [-73.9801, 40.7283],
    [-73.9755, 40.721]
]

* Worked!

db.Ristorante.find({ "address.coord": { $geoWithin: { $geometry: { type: "Polygon", coordinates: [ [ [-73.9981, 40.7197], [-73.9922, 40.7239], [-73.9897, 40.7274], [-73.9851, 40.7289], [-73.9801, 40.7283], [-73.9755, 40.721], [-73.9981, 40.7197] ] ] } } } })


Can do the same using the aggregation command:

db.collection.aggregate([{ $match: { "address.coord": { $geoWithin: { $geometry: { type: "Polygon", coordinates: [[[-73.9981, 40.7197],[-73.9922, 40.7239],[-73.9897, 40.7274],[-73.9851, 40.7289],[-73.9801, 40.7283],[-73.9755, 40.721],[-73.9981, 40.7197]]] } } } } }])

¬¬¬¬¬¬¬¬¬


// Defining the target location (longitude and latitude)
var targetLocation = [-73.9216, 40.8695]; // Aleatory coordinates for a location in the Bronx

// Query restaurants near the specified location using $near operator

db.Ristorante.find({"address.coord": {$near: {$geometry: {type: "Point", coordinates: targetLocation}, $maxDistance: 2000}}})

¬¬¬¬¬¬

* This query worked well.

//Defining target location in a park on Little Italy NY (longitude and latitude)

var targetLocation = [-73.88641798264175, 40.85611532142078];

//Query reaturants near the specified location using $near operator

db.Ristorante.find({"address.coord": {$near: {$geometry: {type: "Point", coordinates: targeLocation}, $maxDistance: 500}}})